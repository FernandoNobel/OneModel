@@grammar::OneModel


# TatSu by default defines newline as whitespace but onemodel syntax
# uses newlines as separators. So we have removed the intro from the
# whitespace characters in TatSu.
@@whitespace::/[\t ]+/


# This allows us to use comments like in python.
@@eol_comments::/#.*?$/


# Keywords reserved.
@@keyword:: species parameter reaction end rule


start
  = 
  {newline | @:statement} $
  ;


statement
  = 
  | 'species'   @:species   {',' | @:species}
  | 'parameter' @:parameter {',' | @:parameter}
  | 'reaction'  @:reaction 
  | 'rule'      @:rule 
  | 'species'   newline {newline | @:species newline}   'end'
  | 'parameter' newline {newline | @:parameter newline} 'end'
  | 'reaction'  newline {newline | @:reaction newline}  'end'
  | 'rule'      newline {newline | @:rule newline}      'end'
  | function
  | atom
  ;


species::Species
  = 
  name:identifier ['=' value:atom]
  ;


parameter::Parameter
  = 
  name:identifier ['=' value:atom]
  ;


# S1 + S2 -> S1 + S3; k1*S1(S1+h1)
reaction::Reaction
  =
  [ name:identifier ':']
  {'+' | reactants:identifier} 
  '->' 
  {'+' | products:identifier} 
  newline 
  kinetic_law:formula
  ;


rule
  =
  | rate_rule
  | assignment_rule 
  | algebraic_rule
  ;


rate_rule::RateRule
  =
  [name:identifier ':'] variable:identifier "'" '=' math:formula
  ;


assignment_rule::AssignmentRule
  =
  | name:identifier ':' variable:identifier ':=' math:formula
  | variable:identifier ':=' math:formula
  ;


algebraic_rule::AlgebraicRule
  =
  [name:identifier ':'] variable:identifier '==' math:formula
  ;


function
  =
  printSBML
  ;


printSBML::PrintSBML
  =
  'printSBML'
  ;


atom
  = 
  | float
  | integer
  | string
  | access_property
  | access_identifier
  ;


# Definition of integers.
integer::int
  = 
  /\d+/
  ;


# Definition of floats.
float::float
  =
  | /\d*(?:\.\d+)?(?:e(?:\+|\-)\d+)/  # Scientific notation.
  | /\d*\.\d+/                        # Regular floats.
  ;


# Definition of strings.
string::str
  = 
  "'" @:/[^\\\r\n\f']*/ "'"
  ;


access_property::AccessProperty
  = 
  base:identifier '.' name:identifier
  ;


# Access the value of an identifier.
access_identifier::AccessIdentifier
  = 
  name:identifier
  ;


# Definition of identifiers
# Identifiers cannot have a keyword name.
@name
identifier::str
  =
  /(?!\d)\w+/ 
  ;


formula::str
  =
  /[^\\\r\n\f'\;]*/
  ;


newline 
  = 
  | ';'
  | /\n/
  ;
