@@grammar::OneModel


# TatSu by default defines newline as whitespace but onemodel syntax
# uses newlines as separators. So we have removed the intro from the
# whitespace characters in TatSu.
@@whitespace::/[\t ]+/


# This allows us to use comments like in python.
@@eol_comments::/#.*?$/


start
  = 
  statement $
  ;


statement
  = 
  | parameter
  | variable
  | assign_identifier
  | expression
  ;


parameter::Parameter
  =
  'parameter' name:identifier '=' '{' value:expression ',' units:string '}' [comment:string] 
   ;


variable::Variable
  = 
  'variable' name:identifier '=' '{' value:expression ',' units:string '}' [comment:string] 
  ;


assign_identifier::AssignIdentifier
  = 
  'let' name:identifier '=' value:expression
  ;


expression
  = 
  | addition
  | substraction
  | term
  ;


addition::BinaryOperation
  = 
  left:term op:'+' right:expression
  ;


substraction::BinaryOperation
  = 
  left:term op:'-' right:expression
  ;


term 
  = 
  | multiplication
  | division
  | factor
  ;


multiplication::BinaryOperation
  = 
  left:term op:'*' right:expression
  ;


division::BinaryOperation
  = 
  left:term op:'/' right:expression
  ;


factor
  = 
  | subexpression
  | atom
  ;


subexpression
  = 
  '(' @:expression ')'
  ;


atom
  = 
  | float
  | integer
  | string
  | access_identifier
  ;


# Definition of integers.
integer::int
  = 
  /\d+/
  ;


# Definition of floats.
float::float
  =
  | /\d*(?:\.\d+)?(?:e(?:\+|\-)\d+)/  # Scientific notation.
  | /\d*\.\d+/                        # Regular floats.
  ;


# Definition of strings.
string::str
  = 
  "'" @:/[^\\\r\n\f']*/ "'"
  ;


access_identifier::AccessIdentifier
  = 
  name:identifier
  ;


@name
identifier::str
  =
  /(?!\d)\w+/ 
  ;


# # Principal rule that TatSu will start looking for it.
# start 
#   =
#   {newline | statement} $ 
#   ;
# 
# 
# statement
#   =
#   expression
#   ;
# 
# 
# expression 
#   = 
#   | parameter
#   | variable
#   | equation
#   | change_property
#   | property
#   | identifier
#   ;
# 
# 
# parameter::DefineParameter
#   = 
#   'parameter' name:identifier '=' '{' value:number ',' units:string '}' [comment:string] 
#   ;
# 
# 
# variable::DefineVariable
#   = 
#   'variable' name:identifier '=' '{' value:number ',' units:string '}' [comment:string] 
#   ;
# 
# 
# equation 
#   = 
#   | equation_ode 
#   | equation_susbtitution
#   | equation_algebraic
#   ;
# 
# 
# equation_ode::DefineEquationOde
#   = 
#   'equation' 'der' '(' name:identifier ')' '==' eqn:math_expr [comment:string] 
#   ;
# 
# 
# equation_susbtitution::DefineEquationSubstitution
#   =
#   'equation' name:identifier ':=' eqn:math_expr [comment:string] 
#   ;
# 
# 
# equation_algebraic::DefineEquationAlgebraic
#   =
#   'equation' name:identifier '==' eqn:math_expr [comment:string] 
#   ;
# 
# 
# math_expr::MathExpression
#   = 
#   {number|operator|identifier|'('|')'}+ 
#   ;
# 
# 
# @name
# identifier::AccessIdentifier
#   = name:/(?!\d)\w+/ 
#   ;
# 
# change_property::ChangeProperty
#   = 
#   var:identifier '.' prop:identifier '=' value:number
#   ;
# 
# property::AccessProperty
#   = 
#   var:identifier '.' prop:identifier
#   ;
# 
# 
# # Definition of numbers, e.g.: '1', '1.0', '1e-1'.
# number::float
#   =
#   /\d+(?:\.\d+)?(?:e(?:\+|\-)\d+)?/ 
#   ;
# 
# 
# # Definition of strings (they can be formed with ' and ").
# string::str
#   = 
#   | /"(.*?)"/
#   | /'(.*?)'/
#   ;
# 
# 
# # Math operators used to define equations.
# operator 
#   = 
#   | '+'
#   | '-'
#   | '*'
#   | '/'
#   | '^'
#   ;
# 
# 
# newline 
#   = 
#   | ';'
#   | /\n/
#   ;
