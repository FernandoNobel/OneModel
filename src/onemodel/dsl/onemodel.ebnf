@@grammar::OneModel


# TatSu by default defines newline as whitespace but onemodel syntax
# uses newlines as separators. So we have removed the intro from the
# whitespace characters in TatSu.
@@whitespace::/[\t ]+/


# This allows us to use comments like in python.
@@eol_comments::/#.*?$/


# Keywords reserved.
@@keyword:: species parameter reaction end rule function


start
  = 
  {statements} $
  ;


statements
  =
  {newline} @:statement {{newline}+ @:statement} {newline}
  ;


statement
  = 
  | 'species'   newline {newline | @:species newline}   'end'
  | 'parameter' newline {newline | @:parameter newline} 'end'
  | 'reaction'  newline {newline | @:reaction newline}  'end'
  | 'rule'      newline {newline | @:rule newline}      'end'
  | expr
  ;


expr
  =
  | 'species'   @:species   {',' | @:species}
  | 'parameter' @:parameter {',' | @:parameter}
  | 'reaction'  @:reaction 
  | 'rule'      @:rule 
  | assign_variable
  | comp_expr
  ;


species::Species
  = 
  name:identifier ['=' value:expr]
  ;


parameter::Parameter
  = 
  name:identifier ['=' value:expr]
  ;


reaction::Reaction
  =
  [ name:identifier ':']
  ('0' | reactants:identifier {'+' | reactants:identifier})
  '->' 
  ('0' | products:identifier {'+' | products:identifier})
  newline 
  kinetic_law:formula
  ;


rule
  =
  | rule_rate
  | rule_assignment
  | rule_algebraic
  ;


rule_rate::RuleRate
  =
  [name:identifier ':'] variable:identifier "'" '=' math:formula
  ;


rule_assignment::RuleAssignment
  =
  | name:identifier ':' variable:identifier ':=' math:formula
  | variable:identifier ':=' math:formula
  ;


rule_algebraic::RuleAlgebraic
  =
  [name:identifier ':'] variable:identifier '==' math:formula
  ;


assign_variable::AssignVariable
  =
  name:identifier {'.' name:identifier} '=' value:expr
  ;


comp_expr
  =
  arith_expr
  ;


arith_expr
  =
  term
  ;


term
  =
  factor
  ;


factor
  =
  power
  ;


power
  =
  call
  ;


call::Call
  =
  | value:atom '(' [args:expr {',' args:expr}] ')'
  | next:atom
  ;


atom
  = 
  | float
  | integer
  | string
  | struct
  | function_definition
  | model_definition
  | access_identifier
  ;


# Definition of integers.
integer::Integer
  = 
  value:/\d+/
  ;


# Definition of floats.
float::Float
  =
  | value:/\d*(?:\.\d+)?(?:e(?:\+|\-)\d+)/  # Scientific notation.
  | value:/\d*\.\d+/                        # Regular floats.
  ;


# Definition of strings.
string::String
  = 
  "'" value:/[^\\\r\n\f']*/ "'"
  ;


struct::Struct
  =
  '{' '}'
  ;


# Access the value of an identifier.
access_identifier::AccessIdentifier
  = 
  name:identifier {'.' name:identifier}
  ;


function_definition::FunctionDefinition
  =
  'function' name:identifier '(' [args:identifier {',' args:identifier}] ')' newline
  {newline | body:statement}
  'end'
  ;


model_definition::ModelDefinition
  =
  'model' name:identifier newline 
  {newline | body:statement}
  'end'
  ;


# Definition of identifiers
# Identifiers cannot have a keyword name.
@name
identifier::str
  =
  /(?!\d)\w+/ 
  ;


formula::str
  =
  /[^\\\r\n\f'\;]*/
  ;


newline 
  = 
  | ';'
  | /\n/
  ;
