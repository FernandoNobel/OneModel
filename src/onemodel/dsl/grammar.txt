# OneModel Syntax

statement  : 'parameter' parameter;
           : 'variable'  variable;
           : 'equation'  equation;

parameter  : Identifier '=' '{' Number ',' String '}' String?;

variable   : Identifier '=' '{' Number ',' String '}' String?;

equation   : 'der' '(' Identifier ')' '==' math_expr String?;
           : Identifier '==' math_expr String?;
           : Identifier ':=' math_expr String?;

math_expr  : ( Number | Identifier | Operator | '(' | ')' )+;

# Kleene operators

 |  : aternative           e.g.: email | tel
 *  : none or more         e.g.: tel*
 +  : one or more          e.g.: email+
 ?  : optional             e.g.: fullname?
 ~  : up-tp                e.g.: ~'}'
 .. : range                e.g.: '0'..'9'
 /  : ordered alternative  e.g.: us_tel / raw_tel

# Example book

contact      : 'contact' username '{' fullname? email+ tel* '}' ;
username     : Identifier ;
fullname     : QuotedString ;
email        : 'email:' emailAddress ;
tel          : 'tel:' telephoneNumber ;
emailAddress : localPart '@' domain ;

# Old syntax

statements  : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement   : KEYWORD:RETURN expr?
            : KEYWORD:CONTINUE
            : KEYWORD:BREAK
            : expr

expr        : KEYWORD:VAR IDENTIFIER EQ expr
            : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr   : NOT comp-expr
            : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : call (POW factor)*

call        : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom        : NUMBER|IDENTIFIER|STRING
            : LPAREN expr RPAREN
            : list-expr
            : if-expr
            : for-expr
            : while-expr
            : func-def

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr     : KEYWORD:IF expr KEYWORD:THEN
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-b   : KEYWORD:ELIF expr KEYWORD:THEN
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-c   : KEYWORD:ELSE 
              statement
            | (NEWLINE statements KEYWORD:END)

for-expr    : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr 
              (KEYWORD:STEP expr)? KEYWORD:THEN 
              statement
            | (NEWLINE statements KEYWORD:END)

while-expr  : KEYWORD:WHILE expr KEYWORD:THEN 
              statement
            | (NEWLINE statements KEYWORD:END)

func-def    : KEYWORD:FUN IDENTIFIER? 
              LEFT_PAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RIGHT_PAREN
              (ARROW expr)
            | (NEWLINE statements KEYWORD:END)

