@@grammar::OneModel


# TatSu by default defines newline as whitespace but onemodel syntax
# uses newlines as separators. So we have removed the intro from the
# whitespace characters in TatSu.
@@whitespace::/[\t ]+/


# This allows us to use comments like in python.
@@eol_comments::/#.*?$/


# Keywords reserved.
@@keyword:: species parameter reaction end rule function input import has standalone if


start
  = 
  {@:statements} $
  ;


statements
  =
  {newline} @:statement {{newline}+ @:statement} {newline}
  ;


statement
  =
  | 'parameter' newline ~ {newline | @:parameter {',' @:parameter} newline} 'end'
  | expr
  ;


expr
  =
  | 'parameter' ~ @:parameter {',' @:parameter}
  | assign_name
  | atom
  ;


atom
  =
  | number
  | access_name
  ;


number
  =
  | float
  | integer
  | docstring
  | string
  ;


newline 
  = 
  | ';'
  | /\n/
  ;


parameter::Parameter
  =
  name:dotted_name ['=' value:number] [[newline] documentation:(docstring|string)]
  ;


assign_name::AssignName
  =
  name:dotted_name '=' value:atom
  ;


access_name::AccessName
  =
  name:dotted_name
  ;


dotted_name::DottedName
  =
  {qualifiers+:name '.'} name:name
  ;


@name  # Name cannot be a keyword name.
name::str
  =
  /(?!\d)\w+/ 
  ;


float::Float
  =
  | value:/\d*(?:\.\d+)?(?:(e|E)(?:\+|\-|)\d+)/  # Scientific notation: 1e2, 1e+2, 10e-3
  | value:/\d*\.\d+/                             # Regular floats: 0.1, 1.05, etc.
  ;


integer::Integer
  = 
  value:/\d+/
  ;


docstring::Docstring
  =
  | '"""' ~ value:/[\w\W]*?(?=\")/ '"""'
  | "'''" ~ value:/[\w\W]*?(?=\')/ "'''"
  ;


string::String
  =
  | '"' value:/.+?(?=\")/ '"'
  | "'" value:/.+?(?=\')/ "'"
  ;


